<style type="text/css">
#map {
    width: 100%;
    height: 420px;
}

.pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
      }

      #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
      }

      .pac-controls {
        display: inline-block;
        padding: 5px 11px;
      }

      .pac-controls label {
        font-size: 13px;
        font-weight: 300;
      }

      #pac-input {
        background-color: #fff;
        font-size: 15px;
        font-weight: 300;
        margin-top: 12px;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 700px;
      }


</style>

<form action="/post/new" method="get">

<div class="form-group">
    <div class="input-group mb-3">
        <input maxlength="20" oninput="inputEvent()" id="title" type="text" class="form-control" placeholder="title" name="title">
        <div class="input-group-append">
        <span id="title-counter" class="input-group-text">20</span>
      </div>
    </div>
</div>

<div class="form-group">
    <div class="input-group mb-3">
        <input maxlength="30" oninput="inputEvent()" id="summary" type="text" class="form-control" placeholder="summary" name="summary">
        <div class="input-group-append">
        <span id="summary-counter" class="input-group-text">30</span>
      </div>
    </div>
</div>

<div class="form-group">
<div class="input-group mb-3">
    <textarea class="form-control" maxlength="3000" oninput="inputEvent()"  id="body" name="body" placeholder="body" rows="5"></textarea>
    <div class="input-group-append">
    <span id="body-counter" class="input-group-text">3000</span>
  </div>
</div>
</div>


<div class="form-group">
<div class="input-group mb-3">
<input class="form-control" oninput="dateInput()" id="date" name="date" placeholder="When has this memory happened?" data-toggle="datepicker">
<div data-toggle="datepicker"></div>
</div>
</div>

<div class="custom-file">
<input type="file" class="custom-file-input" id="file" onchange="upload()">
<label id="custom-file-label" class="custom-file-label" for="file">Upload a picture for your memory...</label>
</div>

<br>
<br>

<input id="pac-input" class="controls form-control" type="text" placeholder="Search for a location or a place...">
<div id="map"></div>

<br>

<input type="hidden" id="image_url" name="image_url" value="none">
<input type="hidden" id="lat" name="lat" value="0">
<input type="hidden" id="lng" name="lng" value="0">

<button class="btn btn-info my-2 my-sm-0" type="submit">Submit</button>

</form>

<br>

<script src="/optionaljs/axios.js"></script>

<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCExsA0cQ9NF5O2KFcguJogK0K7yAs3RqQ&libraries=places&callback=initAutocomplete">
</script>

<script>


function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 41.0854874, lng: 29.0420647},
          zoom: 14,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            var currentLocation = markers[0].getPosition();
            //Add lat and lng values to a field that we can save.
            document.getElementById('lat').value = currentLocation.lat(); //latitude
            document.getElementById('lng').value = currentLocation.lng(); //longitude

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }
        
</script>

<script>

$('[data-toggle="datepicker"]').datepicker({
  format: 'yyyy-mm-dd'
});

function upload() {
    const config = {
            headers: { 'content-type': 'multipart/form-data' },
            onUploadProgress: (progressEvent) => {
                    if (progressEvent.lengthComputable) {
                        document.getElementById('custom-file-label').innerText = 'Please wait...';
                    }
           }
        }
    let data = new FormData();
    data.append('image', document.getElementById('file').files[0], 'image');
    axios.post('/post/upload', data, config).then((response) => {
        console.log(response.data)
        document.getElementById('custom-file-label').innerText = 'You picture has been uploaded!';
        document.getElementById('image_url').value = response.data.file;
    })
}

function inputEvent() {
    document.getElementById('title-counter').innerText = 20 - document.getElementById('title').value.length;
    document.getElementById('summary-counter').innerText = 30 - document.getElementById('summary').value.length;
    document.getElementById('body-counter').innerText = 3000 - document.getElementById('body').value.length;
}

function dateInput() {
    console.log(document.getElementById('date').value)
}

  </script>
